#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

echo "üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ proxy-server..."
echo "=========================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "package.json" ] || [ ! -d "src" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ proxy-server"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
OUTPUT_FILE="project-files-list.txt"

# –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
cat > "$OUTPUT_FILE" << 'EOF'
PROXY-SERVER PROJECT FILE STRUCTURE
===================================
Generated on: $(date)
Directory: $(pwd)

FILE TREE:
----------

EOF

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã tree
if command -v tree &> /dev/null; then
    echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É tree..."

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é tree
    tree -a -I 'node_modules|dist|coverage|.git|logs|*.log|.env|data|backups' --dirsfirst >> "$OUTPUT_FILE"

    echo "" >> "$OUTPUT_FILE"
    echo "DETAILED FILE LIST:" >> "$OUTPUT_FILE"
    echo "==================" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
else
    echo "‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ tree –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º find..."
fi

# –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
echo "–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_files() {
    local dir=$1
    local indent=$2

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    find "$dir" -maxdepth 1 -type d ! -path "$dir" 2>/dev/null | sort | while read -r subdir; do
        local basename=$(basename "$subdir")
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if [[ ! "$basename" =~ ^(\.git|node_modules|dist|coverage|logs|data|backups)$ ]]; then
            echo "${indent}üìÅ $basename/" >> "$OUTPUT_FILE"
            print_files "$subdir" "  $indent"
        fi
    done

    # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã
    find "$dir" -maxdepth 1 -type f 2>/dev/null | sort | while read -r file; do
        local basename=$(basename "$file")
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ log —Ñ–∞–π–ª—ã
        if [[ ! "$basename" =~ \.(log|swp|swo|tmp)$ ]] && [[ ! "$basename" == ".env" ]]; then
            echo "${indent}üìÑ $basename" >> "$OUTPUT_FILE"
        fi
    done
}

# –ï—Å–ª–∏ tree –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–µ –¥–µ—Ä–µ–≤–æ
if ! command -v tree &> /dev/null; then
    echo "üìÅ proxy-server/" >> "$OUTPUT_FILE"
    print_files "." "  "
fi

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö TypeScript —Ñ–∞–π–ª–æ–≤
echo "" >> "$OUTPUT_FILE"
echo "TYPESCRIPT FILES:" >> "$OUTPUT_FILE"
echo "=================" >> "$OUTPUT_FILE"
find . -name "*.ts" -not -path "./node_modules/*" -not -path "./dist/*" -not -path "./coverage/*" | sort >> "$OUTPUT_FILE"

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "" >> "$OUTPUT_FILE"
echo "CONFIGURATION FILES:" >> "$OUTPUT_FILE"
echo "====================" >> "$OUTPUT_FILE"
ls -la *.json *.yml *.yaml .* 2>/dev/null | grep -v "^d" | awk '{print $9}' | grep -v "^$" | sort >> "$OUTPUT_FILE"

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ Docker —Ñ–∞–π–ª–æ–≤
echo "" >> "$OUTPUT_FILE"
echo "DOCKER FILES:" >> "$OUTPUT_FILE"
echo "=============" >> "$OUTPUT_FILE"
find docker -type f 2>/dev/null | sort >> "$OUTPUT_FILE"

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
echo "" >> "$OUTPUT_FILE"
echo "PROJECT STATISTICS:" >> "$OUTPUT_FILE"
echo "===================" >> "$OUTPUT_FILE"

# –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
TS_COUNT=$(find ./src -name "*.ts" 2>/dev/null | wc -l)
JS_COUNT=$(find . -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" 2>/dev/null | wc -l)
JSON_COUNT=$(find . -name "*.json" -not -path "./node_modules/*" 2>/dev/null | wc -l)
YML_COUNT=$(find . -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l)
MD_COUNT=$(find . -name "*.md" 2>/dev/null | wc -l)

echo "TypeScript files: $TS_COUNT" >> "$OUTPUT_FILE"
echo "JavaScript files: $JS_COUNT" >> "$OUTPUT_FILE"
echo "JSON files: $JSON_COUNT" >> "$OUTPUT_FILE"
echo "YAML files: $YML_COUNT" >> "$OUTPUT_FILE"
echo "Markdown files: $MD_COUNT" >> "$OUTPUT_FILE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "" >> "$OUTPUT_FILE"
echo "KEY FILES CHECK:" >> "$OUTPUT_FILE"
echo "================" >> "$OUTPUT_FILE"

check_file() {
    if [ -f "$1" ]; then
        echo "‚úÖ $1" >> "$OUTPUT_FILE"
    else
        echo "‚ùå $1 (MISSING)" >> "$OUTPUT_FILE"
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
check_file "package.json"
check_file "tsconfig.json"
check_file "Makefile"
check_file ".gitignore"
check_file ".dockerignore"
check_file ".env.example"
check_file "README.md"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º src —Ñ–∞–π–ª—ã
check_file "src/server.ts"
check_file "src/app.ts"
check_file "src/config/index.ts"
check_file "src/config/redis.ts"
check_file "src/config/logger.ts"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker —Ñ–∞–π–ª—ã
check_file "docker/docker-compose.yml"
check_file "docker/docker-compose.dev.yml"
check_file "docker/docker-compose.prod.yml"
check_file "docker/Dockerfile"
check_file "docker/nginx/nginx.conf"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "" >> "$OUTPUT_FILE"
echo "DIRECTORY CHECK:" >> "$OUTPUT_FILE"
echo "================" >> "$OUTPUT_FILE"

check_dir() {
    if [ -d "$1" ]; then
        echo "‚úÖ $1/" >> "$OUTPUT_FILE"
    else
        echo "‚ùå $1/ (MISSING)" >> "$OUTPUT_FILE"
    fi
}

check_dir "src"
check_dir "src/config"
check_dir "src/controllers"
check_dir "src/middlewares"
check_dir "src/services"
check_dir "src/services/queue"
check_dir "src/routes"
check_dir "docker"
check_dir "docker/monitoring"
check_dir "docker/monitoring/grafana"
check_dir "tests"
check_dir "scripts"

# –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
echo "" >> "$OUTPUT_FILE"
echo "=========================================" >> "$OUTPUT_FILE"
echo "Generated by: $0" >> "$OUTPUT_FILE"
echo "Date: $(date)" >> "$OUTPUT_FILE"

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
echo ""
echo "‚úÖ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω: $OUTPUT_FILE"
echo ""
echo "üìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
echo "   - TypeScript —Ñ–∞–π–ª–æ–≤: $TS_COUNT"
echo "   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $JSON_COUNT JSON, $YML_COUNT YAML"
echo "   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: $MD_COUNT Markdown —Ñ–∞–π–ª–æ–≤"
echo ""
echo "üìÑ –ü–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞:"
echo "------------------------"
head -n 50 "$OUTPUT_FILE"
echo "..."
echo ""
echo "üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   cat $OUTPUT_FILE"
echo "   less $OUTPUT_FILE"
echo ""
echo "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª $OUTPUT_FILE –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"